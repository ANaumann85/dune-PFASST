1c1
< #include "pfasst/sweeper/FE_imex.hpp"
---
> #include "pfasst/sweeper/imex.hpp"
15,16d14
< #include <ios>
< 
90,94c88
<     
<     	/*std::cout <<  "predict " << std::endl;
<         for (int i=0; i< this->get_end_state()->data().size(); i++){
<           std::cout <<  this->get_end_state()->data()[i] << std::endl;
<         }*/
---
>     Sweeper<SweeperTrait, Enabled>::predict();
97c91,94
<     Sweeper<SweeperTrait, Enabled>::predict();
---
>     	/*std::cout <<  "grob" << std::endl;
>         for (int i=0; i< this->get_end_state()->data().size(); i++){
>           std::cout <<  this->get_states().front()->data()[i] << std::endl;
>         }*/
126,129c123
<       //std::cout << "vor mv" << std::endl;
<       M_dune.mv(this->get_states()[m]->get_data(), rhs->data());
<       //std::cout << "nach mv" << std::endl;
<       //rhs->data() = this->get_states()[m]->get_data();
---
>       rhs->data() = this->get_states()[m]->get_data();
139,140d132
<       //afangswert setzen
<       this->states()[m + 1]->data() = this->states()[m + 1]->get_data();
143,144c135,136
<     	/*std::cout <<  "predict nach impl solve" << std::endl;
<         for (int i=0; i< this->get_end_state()->data().size(); i++){
---
>          	std::cout <<  "grob" << std::endl;
>         /*for (int i=0; i< this->get_end_state()->data().size(); i++){
148d139
< 
165,168d155
<             /*std::cout <<  "im post predict" << std::endl;
<         for (int i=0; i< this->get_end_state()->data().size(); i++){
<           std::cout <<  this->get_end_state()->data()[i] << std::endl;
<         }*/ 
170,173d156
<            /* std::cout <<  "nach post predict" << std::endl;
<         for (int i=0; i< this->get_end_state()->data().size(); i++){
<           std::cout <<  this->get_end_state()->data()[i] << std::endl;
<         } */
180,185d162
<     
<         /*std::cout <<  "pre_sweep" << std::endl;
<         for (int i=0; i< this->get_end_state()->data().size(); i++){
<           std::cout <<  this->get_end_state()->data()[i] << std::endl;
<         } */   
<     
190a168,172
>         	/*std::cout <<  "grob" << std::endl;
>         for (int i=0; i< this->get_end_state()->data().size(); i++){
>           std::cout <<  this->get_states().front()->data()[i] << std::endl;
>         }*/
> 
194,196d175
< 
< 
< 	
252c231
<           std::cout <<  this->get_end_state()->data()[i] << std::endl;
---
>           std::cout <<  this->get_states().front()->data()[i] << std::endl;
254,256c233,234
< 	
<     
<     
---
> 
> 
285a264
>       rhs->data() = this->get_states().front()->get_data();
287,288d265
<       M_dune.mv(this->get_states().front()->get_data(), rhs->data());
<       //rhs->data() = this->get_states().front()->get_data();
304,306d280
<       //shared_ptr<typename traits::encap_t> M_q_integrals = this->get_encap_factory().create();
<       //M_dune.mv(this->_q_integrals[m + 1]->data(), M_q_integrals->data());
<       
313,314d286
<       //afangswert setzen
<       this->states()[m + 1]->data() = this->states()[m + 1]->get_data();
316,317d287
< //       ML_CVLOG(5, this->get_logger_id(), "  u["<<(m+1)<<"] = " << to_string(this->get_states()[m + 1]));
< 
322a293,295
> 
> //       ML_CVLOG(5, this->get_logger_id(), "  u["<<(m+1)<<"] = " << to_string(this->get_states()[m + 1]));
> 
440,441c413
<       //this->end_state()->data() = this->get_initial_state()->get_data();
<       M_dune.mv(this->get_initial_state()->get_data(), this->end_state()->data());
---
>       this->end_state()->data() = this->get_initial_state()->get_data();
464,474c436,437
<       
<       M_dune.mv(this->get_initial_state()->get_data(), this->residuals().back()->data());
<       //this->residuals().back()->data() = this->get_initial_state()->get_data();
<       
<       shared_ptr<typename traits::encap_t> uM = this->get_encap_factory().create();	
<       M_dune.mv(this->get_states().back()->get_data(), uM->data());
<       this->residuals().back()->scaled_add(-1.0, uM);	
<       //this->residuals()[m]->scaled_add(-1.0,uM);
< 
<       
<       
---
>       this->residuals().back()->data() = this->get_initial_state()->get_data();
>       this->residuals().back()->scaled_add(-1.0, this->get_states().back());
484a448
> 
486,494c450
<         //this->residuals()[m]->data() = this->get_initial_state()->get_data();
< 	/*std::cout << "************* im fe_imex pointer *********************" << std::endl;	
< 	for (int i=0; i< 2; i++){
< 	  //std::cout <<  "A  " << this->A_dune[i][i] << std::endl;
< 	  std::cout <<  "M  " << (M_dune)[i][i] << std::endl;
<         }
< 	std::cout << "**********************************" << std::endl;*/	
< 	
< 	M_dune.mv(this->get_initial_state()->get_data(), this->residuals()[m]->data());
---
>         this->residuals()[m]->data() = this->get_initial_state()->get_data();
496,502c452,455
<   //       ML_CVLOG(5, this->get_logger_id(), "        -= u["<<m<<"]   = " << to_string(this->get_states()[m]));
< 	
< 	shared_ptr<typename traits::encap_t> uM = this->get_encap_factory().create();
< 	
< 	/*std::cout <<  "u " << std::endl;
<         for (int i=0; i< this->get_end_state()->data().size(); i++){
<           std::cout <<  this->get_states()[m]->get_data()[i] << std::endl;
---
> 	/*std::cout <<  "schleife u " <<  std::endl;
> 	for (int i=0; i< this->get_end_state()->data().size(); i++){
>           std::cout <<   std::endl;
> 	  std::cout <<  "m " << this->M_dune[i][i] << std::endl;
504,507d456
< 	M_dune.mv(this->get_states()[m]->get_data(), uM->data());
< 	
< 	/*std::cout <<  "uM hier" << std::endl;
< 
509,512c458,459
<         std::exit(0);*/
< 	
< 	this->residuals()[m]->scaled_add(-1.0,uM);
<         //this->residuals()[m]->scaled_add(-1.0, this->get_states()[m]);
---
>   //       ML_CVLOG(5, this->get_logger_id(), "        -= u["<<m<<"]   = " << to_string(this->get_states()[m]));
>         this->residuals()[m]->scaled_add(-1.0, this->get_states()[m]);
516a464
> 
530c478
< 
---
> 	
532d479
<       
537,549d483
<   /*template<class SweeperTrait, typename Enabled>
<   void
<   IMEX<SweeperTrait, Enabled>::test_m(MatrixType M)
<   {
<     std::cout << "************* im fe_imex pointer *********************" << std::endl;	
< 	for (int i=0; i< 2; i++){
< 	  //std::cout <<  "A  " << this->A_dune[i][i] << std::endl;
< 	  std::cout <<  "M  " << M[i][i] << std::endl;
<         }
< 	std::cout << "**********************************" << std::endl;	
<   }*/
<   
<   
